import sqlite3
from datetime import datetime
import re
import tkinter as tk
from tkinter import messagebox


class TaskManager:
    def __init__(self, db_name="todo_list.db"):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self._create_table()

    def _create_table(self):
        """Create the tasks table if it doesn't exist."""
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                title TEXT NOT NULL,
                                description TEXT,
                                due_date TEXT,
                                priority TEXT,
                                completed INTEGER DEFAULT 0)''')
        self.conn.commit()

    def _validate_date(self, date_str):
        """Validate date format (YYYY-MM-DD)."""
        if re.match(r'^\d{4}-\d{2}-\d{2}$', date_str):
            try:
                return datetime.strptime(date_str, "%Y-%m-%d").date()
            except ValueError:
                return None
        return None

    def _validate_priority(self, priority):
        """Validate priority level (low, medium, high)."""
        if priority.lower() in ("low", "medium", "high"):
            return priority.lower()
        return None

    def _get_task_by_id(self, task_id):
        """Get a task by its ID."""
        self.cursor.execute("SELECT * FROM tasks WHERE id=?", (task_id,))
        return self.cursor.fetchone()

    def display_tasks(self):
        """Display all tasks sorted by priority and due date."""
        self.cursor.execute("SELECT * FROM tasks ORDER BY priority DESC, due_date ASC")
        tasks = self.cursor.fetchall()
        return tasks

    def add_task(self, title, description, due_date, priority):
        """Add a new task."""
        valid_date = self._validate_date(due_date)
        valid_priority = self._validate_priority(priority)
        if valid_date and valid_priority:
            self.cursor.execute("INSERT INTO tasks (title, description, due_date, priority) VALUES (?, ?, ?, ?)",
                                (title, description, valid_date, valid_priority))
            self.conn.commit()
            return True
        return False

    def edit_task(self, task_id, title=None, description=None, due_date=None, priority=None):
        """Edit an existing task."""
        task = self._get_task_by_id(task_id)
        if task:
            title = title or task[1]
            description = description or task[2]
            due_date = self._validate_date(due_date) if due_date else task[3]
            priority = self._validate_priority(priority) if priority else task[4]

            self.cursor.execute("UPDATE tasks SET title=?, description=?, due_date=?, priority=? WHERE id=?",
                                (title, description, due_date, priority, task_id))
            self.conn.commit()
            return True
        return False

    def delete_task(self, task_id):
        """Delete a task by ID."""
        if self._get_task_by_id(task_id):
            self.cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
            self.conn.commit()
            return True
        return False

    def mark_completed(self, task_id):
        """Mark a task as completed."""
        if self._get_task_by_id(task_id):
            self.cursor.execute("UPDATE tasks SET completed=1 WHERE id=?", (task_id,))
            self.conn.commit()
            return True
        return False

    def close(self):
        """Close the database connection."""
        self.conn.close()


class ToDoApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.task_manager = TaskManager()
        self.title("To-Do List App")

        self.task_listbox = tk.Listbox(self, width=50, height=15)
        self.task_listbox.pack(pady=20)

        self.update_task_list()

    def update_task_list(self):
        """Update the task list displayed in the UI."""
        self.task_listbox.delete(0, tk.END)
        tasks = self.task_manager.display_tasks()
        for task in tasks:
            status = "Completed" if task[5] else "Pending"
            self.task_listbox.insert(tk.END, f"ID: {task[0]} | Title: {task[1]} | Status: {status} | Due: {task[3]} | Priority: {task[4]}")

    def add_task(self):
        """Show a dialog to add a new task."""
        def submit():
            title = title_entry.get()
            description = description_entry.get()
            due_date = due_date_entry.get()
            priority = priority_entry.get()

            # Ensure title is not empty
            if not title.strip():
                messagebox.showwarning("Input Error", "Title cannot be empty.")
                return

            # Ensure due_date is in the correct format
            if not self.task_manager._validate_date(due_date):
                messagebox.showwarning("Input Error", "Due date must be YYYY-MM-DD format.")
                return

            # Ensure priority is valid
            if not self.task_manager._validate_priority(priority):
                messagebox.showwarning("Input Error", "Priority must be 'low', 'medium', or 'high'.")
                return

            if self.task_manager.add_task(title, description, due_date, priority):
                self.update_task_list()
                add_window.destroy()
            else:
                messagebox.showerror("Error", "Invalid date or priority. Task not added.")
            
        add_window = tk.Toplevel(self)
        add_window.title("Add New Task")

        tk.Label(add_window, text="Title:").pack()
        title_entry = tk.Entry(add_window)
        title_entry.pack()

        tk.Label(add_window, text="Description:").pack()
        description_entry = tk.Entry(add_window)
        description_entry.pack()

        tk.Label(add_window, text="Due Date (YYYY-MM-DD):").pack()
        due_date_entry = tk.Entry(add_window)
        due_date_entry.pack()

        tk.Label(add_window, text="Priority (low, medium, high):").pack()
        priority_entry = tk.Entry(add_window)
        priority_entry.pack()

        tk.Button(add_window, text="Submit", command=submit).pack()

    def edit_task(self):
        """Show a dialog to edit a task."""
        selected_task = self.get_selected_task()
        if selected_task:
            task_id = selected_task[0]

            def submit():
                title = title_entry.get()
                description = description_entry.get()
                due_date = due_date_entry.get()
                priority = priority_entry.get()

                if self.task_manager.edit_task(task_id, title, description, due_date, priority):
                    self.update_task_list()
                    edit_window.destroy()
                else:
                    messagebox.showerror("Error", "Invalid date or priority. Task not updated.")

            edit_window = tk.Toplevel(self)
            edit_window.title("Edit Task")

            tk.Label(edit_window, text="Title:").pack()
            title_entry = tk.Entry(edit_window)
            title_entry.insert(tk.END, selected_task[1])
            title_entry.pack()

            tk.Label(edit_window, text="Description:").pack()
            description_entry = tk.Entry(edit_window)
            description_entry.insert(tk.END, selected_task[2])
            description_entry.pack()

            tk.Label(edit_window, text="Due Date (YYYY-MM-DD):").pack()
            due_date_entry = tk.Entry(edit_window)
            due_date_entry.insert(tk.END, selected_task[3])
            due_date_entry.pack()

            tk.Label(edit_window, text="Priority (low, medium, high):").pack()
            priority_entry = tk.Entry(edit_window)
            priority_entry.insert(tk.END, selected_task[4])
            priority_entry.pack()

            tk.Button(edit_window, text="Submit", command=submit).pack()

    def delete_task(self):
        """Delete the selected task."""
        selected_task = self.get_selected_task()
        if selected_task:
            task_id = selected_task[0]
            if self.task_manager.delete_task(task_id):
                self.update_task_list()

    def mark_completed(self):
        """Mark the selected task as completed."""
        selected_task = self.get_selected_task()
        if selected_task:
            task_id = selected_task[0]
            if self.task_manager.mark_completed(task_id):
                self.update_task_list()

    def get_selected_task(self):
        """Get the selected task from the listbox."""
        selected_index = self.task_listbox.curselection()
        if selected_index:
            task_str = self.task_listbox.get(selected_index)
            task_id = int(task_str.split('|')[0].split(":")[1].strip())
            return self.task_manager._get_task_by_id(task_id)
        else:
            messagebox.showwarning("No Selection", "Please select a task first.")
            return None

    def exit_app(self):
        """Exit the application."""
        self.task_manager.close()
        self.quit()


if __name__ == "__main__":
    app = ToDoApp()
    app.mainloop()
